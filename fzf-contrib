#!/usr/bin/env sh

# fzf-contrib (MIT License)
# Copyright (c) 2015 D630, https://github.com/D630/fzf-contrib

# -- CONFIG.

readonly version="0.1.0beta"
readonly shells_sh="bash,mksh,zsh"
readonly applications="${shells_sh},fish,tmux,vim" # See func __fzf_contrib_load()
export LC_COLLATE="C"

# -- FUNCTIONS.

__fzf_contrib_add ()
{
    __fzf_contrib_check_source_file "${PWD}/src/${1}"

    local \
        arg= \
        dest= \
        src="$1"

    for arg
    do
        case "$arg" in
            d=?*)
                dest="${arg#d=}"
        esac
        shift 1
    done


    if [ -d "${PWD}/.git" ]
    then
        command cp -i "${PWD}/src/${src}" "${FZF_CONTRIB_DIR}/src/${dest:-${src}}" && \
            printf "Copy '%s' -> '%s'\n" "${PWD}/src/${src}" "${FZF_CONTRIB_DIR}/src/${dest:-${src}}" 1>&2
    else
        { printf '%s\n' "${0}:Error:85: Not a git repository" 1>&2 ; exit 85 ; }
    fi
}

__fzf_contrib_check_source_dir () { [ -d "$1" ] ; }

__fzf_contrib_check_source_file ()
{
    [ -f "$1" ] || \
        { printf '%s\n' "${0}:Error:80: File is missing: '${1}'" 1>&2 ; exit 80 ; }
}

__fzf_contrib_help ()
{
    printf '%s\n' "fzf-contrib v$(__fzf_contrib_version)
usage: fzf-contrib <subcommand> [<arguments>]

Subcommands:
add <src> [d=<dest>]            Copy a src file from <fzf-contrib/src> to
                                <FZF_CONTRIB_DIR/src>
help                            Show this instruction
info [<pattern>]                Output records from INFO.csv
init                            Initialize src dir from the <fzf-contrib>
                                repo; copy its contents to
                                <FZF_CONTRIB_DIR/src>
load <src> [a=<app>] [d=<dest>] Hard link a src file from
                                <FZF_CONTRIB_DIR/src> into
                                <FZF_CONTRIB_DIR/rc>
reload                          Remove all hardlinks in <FZF_CONTRIB_DIR/rc>
                                and source <FZF_CONTRIB_DIR/LINKS.txt>.
                                Use this command in a hook script like
                                <.git/hooks/post-merge>
uload [<src>] [a=<app>]         Remove hard link from <FZF_CONTRIB_DIR/rc>
version                         Print version

Arguments:
<app>                           Name of application and subdirectory in
                                <FZF_CONTRIB_DIR/rc>. Delimite apps with
                                comma: 'zsh,mksh,bash'
<dest>                          New name of the current script in
                                <FZF_CONTRIB_DIR/rc>
<pattern>                       Grep BRE pattern
<src>                           Basename of the script in the current
                                src dir

Environment variables:
FZF_CONTRIB_DIR
    \${XDG_DATA_HOME:-\${HOME}/.local/share}/fzf-custom
"
}

__fzf_contrib_info ()
{
    if [ -f "${PWD}/INFO.csv" ]
    then
        local info_file="${PWD}/INFO.csv"
    elif [ -f "${FZF_CONTRIB_DIR}/INFO.csv" ]
    then
        local info_file="${FZF_CONTRIB_DIR}/INFO.csv"
    else
        { printf '%s\n' "${0}:Error:86: Could not locate INFO.csv" 1>&2 ; return 86 ; }
    fi

    local \
        apps= \
        desc= \
        name= \
        tags=

    command grep -e "$1" "$info_file" | \
    while IFS="|" read -r name apps tags desc
    do
        printf "NAME  %s\nAPPS  %s\nTAGS  %s\nDESC  %s\n\n" "$name" "$apps" "$tags" "$desc"
    done
}

__fzf_contrib_init ()
if __fzf_contrib_check_source_dir "${FZF_CONTRIB_DIR}/src"
then
    { printf '%s\n' "${0}:Error:83: Dir exists: '${FZF_CONTRIB_DIR}/src'" 1>&2 ; return 83 ; }
elif [ -d "${PWD}/.git" ] && __fzf_contrib_check_source_dir "${PWD}/src"
then
    local src=
    command mkdir -p "${FZF_CONTRIB_DIR}/src" && \
        printf "Create '%s'\n" "${FZF_CONTRIB_DIR}/src" 1>&2
    command cp -i "${PWD}/INFO.csv" "${FZF_CONTRIB_DIR}/INFO.csv" && \
        printf "Copy '%s' -> '%s'\n" "${PWD}/INFO.csv" "${FZF_CONTRIB_DIR}/INFO.csv" 1>&2
    for src in "${PWD}"/src/*
    do
        command cp -i "$src" "${FZF_CONTRIB_DIR}/src/${src##*/}" && \
            printf "Copy '%s' -> '%s'\n" "$src" "${FZF_CONTRIB_DIR}/src/${src##*/}" 1>&2
    done
    return "$?"
else
    { printf '%s\n' "${0}:Error:84: Not a git repository, or src dir missing" 1>&2 ; return 84 ; }
fi

__fzf_contrib_load ()
{
    __fzf_contrib_check_source_file "${FZF_CONTRIB_DIR}/src/${1}"

    local \
        apps= \
        arg= \
        dest= \
        src="$1"

    for arg
    do
        case "$arg" in
            d=?*)
                dest="${arg#d=}"
                ;;
            a=?*)
                apps="${arg#a=}"
        esac
        shift 1
    done

    exec 3>>"${FZF_CONTRIB_DIR}/LINKS.txt"

    local rc=
    if [ -n "$dest" -a -n "$apps" ]
    then
        for rc in $(printf '%s' "$apps" | command tr ',' ' ')
        do
            command ln "${FZF_CONTRIB_DIR}/src/${src}" "${FZF_CONTRIB_DIR}/rc/${rc}/${dest}" 1>&2 && \
                printf '%s\n' "command ln \"\${GIT_DIR}/src/${src}\" \"\${GIT_DIR}/rc/${rc}/${dest}\"" 1>&3 && \
                printf "Create '%s' -> '%s'\n" "${FZF_CONTRIB_DIR}/src/${src}" "${FZF_CONTRIB_DIR}/rc/${rc}/${dest}" 1>&2
        done
    elif [ -z "$dest" -a -n "$apps" ]
    then
        for rc in $(printf '%s' "$apps" | command tr ',' ' ')
        do
            command ln "${FZF_CONTRIB_DIR}/src/${src}" "${FZF_CONTRIB_DIR}/rc/${rc}/${src}" 1>&2 && \
                printf '%s\n' "command ln \"\${GIT_DIR}/src/${src}\" \"\${GIT_DIR}/rc/${rc}/${src}\"" 1>&3 && \
                printf "Create '%s' -> '%s'\n" "${FZF_CONTRIB_DIR}/src/${src}" "${FZF_CONTRIB_DIR}/rc/${rc}/${src}" 1>&2
        done
    else
        local shebang=
        read -r _ shebang < "${FZF_CONTRIB_DIR}/src/${src}"
        case "$shebang" in
            sh)
                for rc in $(printf '%s' "$shells_sh" | command tr ',' ' ')
                do
                    command ln "${FZF_CONTRIB_DIR}/src/${src}" "${FZF_CONTRIB_DIR}/rc/${rc}/${dest:-${src}}" 1>&2 && \
                        printf '%s\n' "command ln \"\${GIT_DIR}/src/${src}\" \"\${GIT_DIR}/rc/${rc}/${dest:-${src}}\"" 1>&3 && \
                        printf "Create '%s' -> '%s'\n" "${FZF_CONTRIB_DIR}/src/${src}" "${FZF_CONTRIB_DIR}/rc/${rc}/${dest:-${src}}" 1>&2
                done
                ;;
            bash|fish|mksh|tmux|vim|zsh)
                command ln "${FZF_CONTRIB_DIR}/src/${src}" "${FZF_CONTRIB_DIR}/rc/${shebang}/${dest:-${src}}" 1>&2 && \
                    printf '%s\n' "command ln \"\${GIT_DIR}/src/${src}\" \"\${GIT_DIR}/rc/${shebang}/${dest:-${src}}\"" 1>&3 && \
                    printf "Create '%s' -> '%s'\n" "${FZF_CONTRIB_DIR}/src/${src}" "${FZF_CONTRIB_DIR}/rc/${shebang}/${dest:-${src}}" 1>&2
                ;;
            *)
                { printf '%s\n' "${0}:Error:81: Unknown shebang: '${shebang}'" 1>&2 ; return 81 ; }
        esac
    fi
}

__fzf_contrib_main ()
{
    local predir_datadir="${XDG_DATA_HOME:-${HOME}/.local/share}"
    local FZF_CONTRIB_DIR="${FZF_CONTRIB_DIR:-${predir_datadir}/fzf-custom}"

    case "$1" in
        init)       __fzf_contrib_init ; exit "$?"                  ;;
        help)       __fzf_contrib_help ; exit "$?"                  ;;
        info)       shift 1 ; __fzf_contrib_info "$@" ; exit "$?"   ;;
        version)    __fzf_contrib_version ; exit "$?"               ;;
        *)          __fzf_contrib_prepare
    esac

    case "$1" in
        add)            shift 1 ; __fzf_contrib_add  "$@"   ;;
        load)           shift 1 ; __fzf_contrib_load "$@"   ;;
        reload)         __fzf_contrib_reload                ;;
        uload|unload)   shift 1 ; __fzf_contrib_unload "$@" ;;
        *)              __fzf_contrib_usage
    esac

    local err="$?"
    exec 3<&-
    exit "$err"
}

__fzf_contrib_prepare ()
{
    __fzf_contrib_check_source_dir "${FZF_CONTRIB_DIR}/src" || { printf '%s\n' "${0}:Error:79: Dir is missing: '${FZF_CONTRIB_DIR}/src'. Please cd into git repo 'fzf-contrib' and run 'fzf-contrib init'" 1>&2 ; exit 79 ; }

    local rc=

    for rc in $(printf '%s' "$applications" | command tr ',' ' ')
    do
        { command mkdir -p "${FZF_CONTRIB_DIR}/rc/${rc}" ; command touch "${FZF_CONTRIB_DIR}/rc/${rc}/.gitkeep" ; } &
    done

    wait

    command touch "${FZF_CONTRIB_DIR}/rc/.gitkeep"
}

__fzf_contrib_reload ()
if [ -f "${FZF_CONTRIB_DIR}/LINKS.txt" -a -d "${FZF_CONTRIB_DIR}/.git" ]
then
    __fzf_contrib_unload_all
    local line=
    while read -r line
    do
        $line && \
        echo "$line"
    done < "${FZF_CONTRIB_DIR}/LINKS.txt"
    #. "${FZF_CONTRIB_DIR}/LINKS.txt"
else
    { printf '%s\n' "${0}:Error:87: Files missing: LINKS.txt or .git" 1>&2 ; return 87 ; }
fi

__fzf_contrib_unload_all ()
{
    local rc=
    for rc in $(command find -H "${FZF_CONTRIB_DIR}/rc" -type f -links +1 -print)
    do
        command rm "$rc" 1>&2 && \
            printf "Remove '%s'\n" "$rc" 1>&2
    done
}

__fzf_contrib_unload ()
{
    if [ "$#" -ne 0 ]
    then
        __fzf_contrib_check_source_file "${FZF_CONTRIB_DIR}/src/${1}"
    else
        command rm -i "${FZF_CONTRIB_DIR}/LINKS.txt" && \
            printf "Remove '%s'\n" "${FZF_CONTRIB_DIR}/LINKS.txt" 1>&2 && \
            __fzf_contrib_unload_all
        return "$?"
    fi

    local \
        apps= \
        arg= \
        inode_rc= \
        inode_src="$(command ls -i "${FZF_CONTRIB_DIR}/src/${1}")" \
        rc= \
        rcc= \
        src="$1"

    inode_src="${inode_src%% *}"

    for arg
    do
        case "$arg" in
            a=?*) apps="${arg#a=}"
        esac
        shift 1
    done

    if [ -n "$apps" ]
    then
        for rc in $(printf '%s' "$apps" | command tr ',' ' ')
        do
            for rcc in $(command find -H "${FZF_CONTRIB_DIR}/rc/${rc}" -type f -links +1 -print)
            do
                inode_rc="$(command ls -i "$rcc")"
                [ "$inode_src" -eq "${inode_rc%% *}" ] && command rm "$rcc" 1>&2 && {
                    command sed "/^.* \"\${GIT_DIR}[/]rc.[^/]*[/]${rcc##*/}\"$/d" "${FZF_CONTRIB_DIR}/LINKS.txt" > "/tmp/${$}.${inode_rc%% *}"
                    command cat "/tmp/${$}.${inode_rc%% *}" > "${FZF_CONTRIB_DIR}/LINKS.txt"
                } && printf "Remove '%s' -> '%s'\n" "${FZF_CONTRIB_DIR}/src/${src}" "$rcc" 1>&2
            done
        done
    else
        for rc in $(command find -H "${FZF_CONTRIB_DIR}/rc" -type f -links +1 -print)
        do
            inode_rc="$(command ls -i "$rc")"
            [ "$inode_src" -eq "${inode_rc%% *}" ] && command rm "$rc" 1>&2 && {
                    command sed "/^.* \"\${GIT_DIR}[/]rc.[^/]*[/]${rc##*/}\"$/d" "${FZF_CONTRIB_DIR}/LINKS.txt" > "/tmp/${$}.${inode_rc%% *}"
                    command cat "/tmp/${$}.${inode_rc%% *}" > "${FZF_CONTRIB_DIR}/LINKS.txt"
                } && printf "Remove '%s' -> '%s'\n" "${FZF_CONTRIB_DIR}/src/${src}" "$rc" 1>&2
        done
    fi
}

__fzf_contrib_usage () { printf '%s\n' "Usage: fzf-contrib [add | help | info | init | load | reload | uload | version ]" ; }

__fzf_contrib_version () { printf '%s\n' "$version" ; }

# -- MAIN.

__fzf_contrib_main "$@"
