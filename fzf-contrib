#!/usr/bin/env sh

# fzf-contrib (MIT License)
# Copyright (c) 2015 D630, https://github.com/D630/fzf-contrib

# -- CONFIG.

set -e
set -u
readonly shells_sh="bash mksh zsh"
readonly applications="${shells_sh} fish tmux vim" # See func __fzf_contrib_load()
export LC_COLLATE="C"

# -- FUNCTIONS.

die ()
{
        printf "${0}/error/%s: %s\n" "$1" "$2" 1>&2;
        exit "$1"
}

msg ()
{
        printf "${0}: %s\n" "$*" 1>&2;
}

fzf_contrib__add ()
{
        local \
                arg \
                dest \
                src="${1:? argument missing}";

        for arg
        do
                case "$arg" in
                d=?*)
                        readonly dest="${arg#d=}"
                esac
                shift 1
        done

        if
                test -d "${FZF_CONTRIB_ROOT}/.git" &&
                GIT_DIR="${FZF_CONTRIB_ROOT}/.git" \
                GIT_WORK_TREE="$FZF_CONTRIB_ROOT" \
                        command git rev-parse --git-dir 1>/dev/null 2>&1;
        then
                msg "Copying '${FZF_CONTRIB_ROOT}/src/${src}' -> '${FZF_CONTRIB_DIR}/src/${dest:-${src}}'"
                GIT_DIR="${FZF_CONTRIB_ROOT}/.git" \
                GIT_WORK_TREE="$FZF_CONTRIB_ROOT" \
                        command git ls-files "src/${src}" \
                        | {
                                IFS= read -r s;
                                command cp -fp \
                                        "${FZF_CONTRIB_ROOT}/${s}" \
                                        "${FZF_CONTRIB_DIR}/src/${dest:-${src}}"
                        }
        else
                die 84 "not a git repository/worktree: '${FZF_CONTRIB_ROOT}'"
        fi
}

fzf_contrib__help ()
{
        fzf_contrib__usage
        command cat <<'HELP'

Subcommands:
add <src> [d=<dest>]            Force a copy of a src file from
                                <FZF_CONTRIB_ROOT/src> to <FZF_CONTRIB_DIR/src>
help                            Show this instruction
info [<pattern>]                Output records from INFO.csv
init                            Initialize local src dir from the
                                <FZF_CONTRIB_ROOT/src>; copy its contents to
                                <FZF_CONTRIB_DIR/src>
load <src> [a=<app>] [d=<dest>] Hard link a src file from
                                <FZF_CONTRIB_DIR/src> into
                                <FZF_CONTRIB_DIR/rc>
reload                          Remove all hardlinks in <FZF_CONTRIB_DIR/rc>
                                and source <FZF_CONTRIB_DIR/LINKS.txt>.
                                Use this command in a hook script like
                                <.git/hooks/post-merge>
uload [<src>] [a=<app>]         Remove hard link from <FZF_CONTRIB_DIR/rc>

Arguments:
<app>                           Name of application and subdirectory in
                                <FZF_CONTRIB_DIR/rc>. Delimite apps with
                                comma: 'zsh,mksh,bash'
<dest>                          New name of the current script in
                                <FZF_CONTRIB_DIR/rc>
<pattern>                       Grep BRE pattern
<src>                           Basename of the script in the current src dir

Environment variables:
FZF_CONTRIB_DIR
    ${XDG_DATA_HOME:-${HOME}/.local/share}/fzf-custom
HELP

} 1>&2

fzf_contrib__info ()
{
        local \
                apps \
                desc \
                expr \
                info_file \
                name \
                tags;

        : "${expr:=${1:? grep pattern missing}}"

        if
                test -f "${FZF_CONTRIB_ROOT}/INFO.csv"
        then
                info_file="${PWD}/INFO.csv"
        elif
                test -f "${FZF_CONTRIB_DIR}/INFO.csv"
        then
                info_file="${FZF_CONTRIB_DIR}/INFO.csv"
        else
                die 86 "could not locate an INFO.csv"
        fi

        msg "Using info file '${info_file}'"

        command grep -e "$1" "$info_file" \
        | {
                while
                        IFS='|' read -r name apps tags desc
                do
                        printf "NAME  %s\nAPPS  %s\nTAGS  %s\nDESC  %s\n\n" "$name" "$apps" "$tags" "$desc"
                done
        }
}

fzf_contrib__init ()
if
        test -d "${FZF_CONTRIB_DIR}/src"
then
        die 83 "dir exists: '${FZF_CONTRIB_DIR}/src'"
elif
        test -d "${FZF_CONTRIB_ROOT}/.git" &&
        GIT_DIR="${FZF_CONTRIB_ROOT}/.git" \
        GIT_WORK_TREE="$FZF_CONTRIB_ROOT" \
                command git rev-parse --git-dir 1>/dev/null 2>&1;
then
        msg "Creating '${FZF_CONTRIB_DIR}'"
        command mkdir -p "$FZF_CONTRIB_DIR"
        msg "Copying '${FZF_CONTRIB_ROOT}/INFO.csv' -> '${FZF_CONTRIB_DIR}/INFO.csv'"
        command cp -i "${FZF_CONTRIB_ROOT}/INFO.csv" "${FZF_CONTRIB_DIR}/INFO.csv"
        msg "Copying '${FZF_CONTRIB_ROOT}/src/' -> '${FZF_CONTRIB_DIR}/src/'"
        GIT_DIR="${FZF_CONTRIB_ROOT}/.git" \
        GIT_WORK_TREE="$FZF_CONTRIB_ROOT" \
                command git ls-files src \
                | command xargs -I '{}' install -D '{}' "${FZF_CONTRIB_DIR}/{}"
else
        die 84 "not a git repository/worktree: '${FZF_CONTRIB_ROOT}'"
fi

fzf_contrib__load ()
{
        local \
                apps= \
                arg \
                dest= \
                rc \
                shebang \
                src="${1:? argument missing}";

        for arg
        do
                case "$arg" in
                d=?*)
                        readonly dest="${arg#d=}"
                ;;
                a=?*)
                        readonly apps="${arg#a=}"
                esac
                shift 1
        done

        exec 9>>"${FZF_CONTRIB_DIR}/LINKS.txt"

        if
                test -n "$dest" -a -n "$apps"
        then
                for rc in $(IFS=, ; printf '%s ' ${apps})
                do
                        msg "Linking '${FZF_CONTRIB_DIR}/src/${src}' -> '${FZF_CONTRIB_DIR}/rc/${rc}/${dest}'"
                        command ln -f "${FZF_CONTRIB_DIR}/src/${src}" "${FZF_CONTRIB_DIR}/rc/${rc}/${dest}"
                        printf '%s\n' "command ln -f \"\${GIT_DIR}/src/${src}\" \"\${GIT_DIR}/rc/${rc}/${dest}\"" 1>&9;
                done
        elif
                test -z "$dest" -a -n "$apps"
        then
                for rc in $(IFS=, ; printf '%s ' ${apps})
                do
                        msg "Linking '${FZF_CONTRIB_DIR}/src/${src}' -> '${FZF_CONTRIB_DIR}/rc/${rc}/${src}'"
                        command ln -f "${FZF_CONTRIB_DIR}/src/${src}" "${FZF_CONTRIB_DIR}/rc/${rc}/${src}"
                        printf '%s\n' "command ln -f \"\${GIT_DIR}/src/${src}\" \"\${GIT_DIR}/rc/${rc}/${src}\"" 1>&9;
                done
        else
                read -r _ shebang < "${FZF_CONTRIB_DIR}/src/${src}";
                case "$shebang" in
                sh)
                        for rc in ${shells_sh}
                        do
                                msg "Linking '${FZF_CONTRIB_DIR}/src/${src}' -> '${FZF_CONTRIB_DIR}/rc/${rc}/${dest:-${src}}'"
                                command ln -f "${FZF_CONTRIB_DIR}/src/${src}" "${FZF_CONTRIB_DIR}/rc/${rc}/${dest:-${src}}"
                                printf '%s\n' "command ln -f \"\${GIT_DIR}/src/${src}\" \"\${GIT_DIR}/rc/${rc}/${dest:-${src}}\"" 1>&9;
                        done
                ;;
                bash|fish|mksh|tmux|vim|zsh)
                        msg "Linking '${FZF_CONTRIB_DIR}/src/${src}' -> '${FZF_CONTRIB_DIR}/rc/${shebang}/${dest:-${src}}'"
                        command ln -f "${FZF_CONTRIB_DIR}/src/${src}" "${FZF_CONTRIB_DIR}/rc/${shebang}/${dest:-${src}}"
                        printf '%s\n' "command ln -f \"\${GIT_DIR}/src/${src}\" \"\${GIT_DIR}/rc/${shebang}/${dest:-${src}}\"" 1>&9;
                ;;
                *)
                        die 81 "unknown shebang: '${shebang}'"
                esac
        fi

        exec 9<&-
}

fzf_contrib__main ()
{
        local \
                FZF_CONTRIB_DIR \
                FZF_CONTRIB_ROOT;

        FZF_CONTRIB_DIR="${FZF_CONTRIB_DIR:-${XDG_DATA_HOME:-${HOME}/.local/share}/fzf-custom}"
        FZF_CONTRIB_ROOT="$(
                rl="$(command readlink -fn -- "$0")";
                command dirname -- "$rl"
        )"

        readonly \
                FZF_CONTRIB_DIR \
                FZF_CONTRIB_ROOT;

        case "$1" in
        help|init|version)
                "fzf_contrib__${1}"
                exit "$?"
        ;;
        info)
                shift 1
                fzf_contrib__info "$@"
                exit "$?"
        ;;
        *)
                fzf_contrib__prepare
        esac

        local cmd="$1"
        shift 1

        case "$cmd" in
        add|load|uload|reload)
                "fzf_contrib__${cmd}" "$@"
        ;;
        *)
                fzf_contrib__usage
        esac
}

fzf_contrib__prepare ()
{
        if
                ! test -d "${FZF_CONTRIB_DIR}/src"
        then
                die 79 "dir is missing: '${FZF_CONTRIB_DIR}/src'. Initialized first?"
        fi

        local rc

        for rc in ${applications}
        do
                {
                        command mkdir -p "${FZF_CONTRIB_DIR}/rc/${rc}"
                        command printf '%s' > "${FZF_CONTRIB_DIR}/rc/${rc}/.gitkeep";
                } &
        done
        wait

        command printf '%s' > "${FZF_CONTRIB_DIR}/rc/.gitkeep";
}

fzf_contrib__reload ()
if
        test -d "${FZF_CONTRIB_DIR}/.git" &&
        GIT_DIR="${FZF_CONTRIB_DIR}/.git" \
        GIT_WORK_TREE="$FZF_CONTRIB_DIR" \
                command git rev-parse --git-dir 1>/dev/null 2>&1;
then
        if
                ! test -f "${FZF_CONTRIB_DIR}/LINKS.txt"
        then
                die 87 "LINKS.txt file missing: '${FZF_CONTRIB_DIR}/LINKS.txt'"
        fi
        fzf_contrib__unload_all
        local line
        #. "${FZF_CONTRIB_DIR}/LINKS.txt"
        while
                IFS= read -r line
        do
                msg "Invoking '${line}'"
                ${line}
        done < "${FZF_CONTRIB_DIR}/LINKS.txt"
else
        die 84 "not a git repository/worktree: '${FZF_CONTRIB_DIR}'"
fi

fzf_contrib__unload_all ()
{
        command find -H "${FZF_CONTRIB_DIR}/rc" -type f -links +1 -print \
        | {
                while
                        IFS= read -r rc
                do
                        msg "Removing '${rc}'"
                        command rm -f "$rc" || :;
                done
        }
}

fzf_contrib__uload ()
{
        if
                test "$#" -eq 0
        then
                msg "Removing '${FZF_CONTRIB_DIR}/LINKS.txt'"
                command rm -f "${FZF_CONTRIB_DIR}/LINKS.txt" || :;
                fzf_contrib__unload_all
                return "$?"
        fi

        local \
                apps= \
                arg \
                inode_src="$(command ls -i "${FZF_CONTRIB_DIR}/src/${1:? argument missing}")" \
                rc \
                src="${1:? argument missing}";

        read -r inode_src _ <<IN
${inode_src}
IN

        for arg
        do
                case "$arg" in
                a=?*) apps="${arg#a=}"
                esac
                shift 1
        done

        if
                test -n "$apps"
        then
                for rc in $(IFS=, ; printf '%s ' ${apps})
                do
                        command find -H "${FZF_CONTRIB_DIR}/rc/${rc}" -type f -links +1 -print \
                        | {
                                while
                                        IFS= read -r rcc
                                do
                                        inode_rc="$(command ls -i "$rcc")"
                                        read -r inode_rc _ <<IN
${inode_rc}
IN
                                        if
                                                test "$inode_src" -eq "$inode_rc"
                                        then
                                                msg "Removing '${rcc}'; is hardlink from '${FZF_CONTRIB_DIR}/src/${src}'"
                                                command rm "$rcc" || :;
                                                command ed -s "${FZF_CONTRIB_DIR}/LINKS.txt" <<S
g/^.* \"\${GIT_DIR}[/]rc.[^/]*[/]${rcc##*/}\"\$/d
w
S
                                        else
                                                msg "Skipping '${rc}'"
                                        fi
                                done
                        }
                done
        else
                command find -H "${FZF_CONTRIB_DIR}/rc" -type f -links +1 -print \
                | {
                        while
                                IFS= read -r rc
                        do
                                inode_rc="$(command ls -i "$rc")"
                                read -r inode_rc _ <<IN
${inode_rc}
IN
                                if
                                        test "$inode_src" -eq "$inode_rc"
                                then
                                        msg "Removing '${rc}'; is hardlink from '${FZF_CONTRIB_DIR}/src/${src}'"
                                        command rm -f "$rc" || :;
                                        command ed -s "${FZF_CONTRIB_DIR}/LINKS.txt" <<S
g/^.* \"\${GIT_DIR}[/]rc.[^/]*[/]${rc##*/}\"\$/d
w
S
                                else
                                        msg "Skipping '${rc}'"
                                fi
                        done
                }
        fi
}

fzf_contrib__usage ()
(
        set -- add help info init load reload uload version
        IFS='|'
        printf 'Usage: fzf-contrib [%s]\n' "${*}"
)

# -- MAIN.

fzf_contrib__main "$@"

# vim: set ts=8 sw=8 tw=0 et :
